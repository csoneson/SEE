% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createCustomPanels.R
\name{createCustomPanels}
\alias{createCustomPanels}
\alias{createCustomTable}
\alias{createCustomPlot}
\title{Create custom panels}
\usage{
createCustomTable(
  FUN,
  argStrings = character(0),
  argNumbers = character(0),
  argFlags = character(0),
  className = "CustomTable",
  fullName = "Custom table",
  where = topenv(parent.frame())
)

createCustomPlot(
  FUN,
  argStrings = character(0),
  argNumbers = character(0),
  argFlags = character(0),
  className = "CustomPlot",
  fullName = "Custom plot",
  where = topenv(parent.frame())
)
}
\arguments{
\item{FUN}{A function that generates a data.frame or a \link{ggplot},
for \code{createCustomTable} and \code{createCustomPlot} respectively.
See Details for the expected arguments.}

\item{argStrings}{Character vector of names of optional string arguments to \code{FUN}.}

\item{argNumbers}{Character vector of names of optional (scalar) numeric arguments to \code{FUN}.}

\item{argFlags}{Character vector of names of optional (scalar) logical arguments to \code{FUN}.}

\item{className}{String containing the name of the new \linkS4class{Panel} class.}

\item{fullName}{String containing the full name of the new class.}

\item{where}{An environment indicating where the class and method definitions should be stored.}
}
\value{
A new class and its methods are defined in the global environment.
A generator function for creating new instances of the class is returned.
}
\description{
Helper functions for quick-and-dirty creation of custom panels,
usually in the context of a one-off application.
This creates a new class with specialized methods for showing content based on a user-specified function.
}
\details{
\code{FUN} is expected to have the following first 3 arguments:
\itemize{
\item \code{se}, a \linkS4class{SummarizedExperiment} object for the current dataset of interest.
\item \code{rows}, a list of row selections received from the transmitting panel.
This contains one or more character vectors of row names in active and saved selections.
Alternatively, this may be \code{NULL} if no selection has been made in the transmitter.
\item \code{columns}, a list of column selections received from the transmitting panel.
This contains one or more character vectors of column names in active and saved selections.
Alternatively, this may be \code{NULL} if no selection has been made in the transmitter.
}

Any number of additional named arguments may also be present in \code{FUN}.
These will be passed from UI elements in the panel if the names of those arguments are listed in \code{argStrings}, etc.
All such additional arguments should have default values,
which are extracted for use as the default vfalues in the UI.

Classes created via these functions are extremely limited.
Only scalar inputs are supported via the UI and all panels cannot transmit to the rest of the app.
We recommend only using these functions for one-off applications to quickly prototype concepts;
serious \linkS4class{Panel} extensions should be done explicitly.
}
\examples{
library(scater)
CUSTOM_PCA <- function(se, rows, columns, ntop=500, scale=TRUE) {
    if (!is.null(columns)) {
        kept <- se[, unique(unlist(columns))]
    } else {
        return(
            ggplot() + theme_void() + geom_text(
                aes(x, y, label=label),
                data.frame(x=0, y=0, label="No column data selected."),
                size=5)
            )
    }

    if (!is.null(rows)) {
        subset_row <- unique(unlist(rows))
    } else {
        subset_row <- NULL
    }

    kept <- runPCA(kept, ncomponents=2, ntop=ntop, 
        scale=scale, subset_row=subset_row)
    plotPCA(kept)
}

GEN <- createCustomPlot(CUSTOM_PCA, argNumbers="ntop", argFlags="scale")
GEN()

if (interactive()) {
    library(scRNAseq)
    sce <- ReprocessedAllenData("tophat_counts")
    library(scater)
    sce <- logNormCounts(sce, exprs_values="tophat_counts")

    iSEE(sce, initial=list(
        ColumnDataPlot(PanelId=1L),
        GEN(SelectColSource="ColumnDataPlot1")
    ))
}

}
\author{
Aaron Lun
}
