% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createLandingPage.R
\name{createLandingPage}
\alias{createLandingPage}
\title{Create a landing page}
\usage{
createLandingPage(
  seUI = NULL,
  seLoad = NULL,
  initUI = NULL,
  initLoad = NULL,
  requireButton = TRUE
)
}
\arguments{
\item{seUI}{Function that accepts a single \code{id} argument and returns a UI element for specifying the SummarizedExperiment.}

\item{seLoad}{Function that accepts the input value of the UI element from \code{seUI}
and returns a \linkS4class{SummarizedExperiment} object.}

\item{initUI}{Function that accepts a single \code{id} argument and returns a UI element for specifying the initial state.}

\item{initLoad}{Function that accepts the input value of the UI element from \code{initUI}
and returns a list of \linkS4class{Panel}s.}

\item{requireButton}{Logical scalar indicating whether the app should require an explicit button press to initialize,
or if it should initialize upon any modification to the UI element in \code{seUI}.}
}
\value{
A function that generates a landing page upon being passed to \code{\link{iSEE}}
as the \code{landingPage} argument.
}
\description{
Define a function to create a landing page in which users can specify or upload \link{SummarizedExperiment} objects.
}
\details{
By default, this function creates a landing page in which users can upload an RDS file containing a SummarizedExperiment,
which is subsequently read by \code{\link{readRDS}} to launch an instance of \code{\link{iSEE}}.
However, any source of SummarizedExperiment objects can be used;
for example, we can retrieve them from databases by modifying \code{seUI} and \code{seLoad} appropriately.

The default landing page also allows users to upload a RDS file containing a list of \linkS4class{Panel}s,
which specifies the initial state of the \code{\link{iSEE}} instance (effectively replacing the \code{initial} argument).
Again, any source can be used to create this list if \code{initUI} and \code{initLoad} are modified appropriately.
Note that only \linkS4class{Panel}s classes that were in the original \code{\link{iSEE}} call
(as the original \code{initial} or in the \code{extra}) will be used for security and other reasons.

The UI elements for the SummarizedExperiment and the initial state are named \code{se} and \code{initial} respectively.
This can be used in Shiny bookmarking to initialize an \code{\link{iSEE}} in a desired state by simply clicking a link,
provided that \code{requireButton=FALSE} so that reactive expressions are immediately triggered upon setting \code{se} and \code{initial}.
We do not use bookmarking to set all individual \code{\link{iSEE}} parameters as we will run afoul of URL character limits.
}
\section{Defining a custom landing page}{

We note that \code{createLandingPage} is just a limited wrapper around the landing page API.
In \code{\link{iSEE}}, \code{landingPage} can be any function with the following argument signature:
\itemize{
\item \code{FUN}, a function to initialize the \code{\link{iSEE}} observer architecture.
This function expects to be passed \code{SE}, a SummarizedExperiment object;
and \code{INITIAL}, a list of \linkS4class{Panel} objects describing the initial application state.
If \code{INITIAL=NULL}, the initial state from \code{initial} is used instead.
\item \code{input}, the Shiny input list.
\item \code{output}, the Shiny output list.
\item \code{session}, the Shiny session object.
}

The function should render UI elements into \code{output$allPanels}
containing the required widgets to allow a user to set up an \code{\link{iSEE}} session interactively.
It should also define observers to respond to those elements and call \code{FUN} with appropriate arguments.
We suggest that all elements have IDs prefixed with \code{"initialize_INTERNAL"} to avoid conflicts with other elements.
}

\examples{
createLandingPage()

# Alternative approach, to create a landing page
# that opens one of the datasets from the scRNAseq package.
library(scRNAseq)
all.data <- ls("package:scRNAseq")
all.data <- all.data[grep("Data$", all.data)]

FUN <- createLandingPage(
    seUI=function(id) selectInput(id, "Dataset:", choices=all.data),
    seLoad=function(x) get(x, as.environment("package:scRNAseq"))()
)

app <- iSEE(landingPage=FUN)
if (interactive()) {
  shiny::runApp(app, port=1234)
}

}
\author{
Aaron Lun
}
